-- Sqlite3 sqlite schema for the application

CREATE TABLE IF NOT EXISTS federalEntity
(
    federalEntityId TEXT    NOT NULL,
    keyCode         TEXT    NOT NULL,
    name            TEXT    NOT NULL,
    createdAt       INTEGER NOT NULL,
    updatedAt       INTEGER,

    CONSTRAINT federalEntity_Pk PRIMARY KEY (federalEntityId),
    CONSTRAINT keyCode_Unq UNIQUE (keyCode)
);

CREATE TABLE IF NOT EXISTS municipality
(
    municipalityId  TEXT    NOT NULL,
    keyCode         TEXT    NOT NULL,
    name            TEXT    NOT NULL,
    createdAt       INTEGER NOT NULL,
    updatedAt       INTEGER,
    federalEntityId TEXT    NOT NULL,

    CONSTRAINT municipality_Pk PRIMARY KEY (municipalityId),
    CONSTRAINT keyCode_federalEntityId_Unq UNIQUE (keyCode, federalEntityId),
    CONSTRAINT federalEntityId_Fk FOREIGN KEY (federalEntityId) REFERENCES federalEntity (federalEntityId)
);

CREATE TABLE IF NOT EXISTS instrumentType
(
    instrumentTypeId TEXT    NOT NULL,
    name             TEXT    NOT NULL,
    createdAt        INTEGER NOT NULL,
    updatedAt        INTEGER,

    CONSTRAINT instrumentType_Pk PRIMARY KEY (instrumentTypeId)
);

CREATE TABLE IF NOT EXISTS statisticType
(
    statisticTypeId TEXT    NOT NULL,
    keyCode         TEXT    NOT NULL,
    name            TEXT    NOT NULL,
    createdAt       INTEGER NOT NULL,
    updatedAt       INTEGER,

    CONSTRAINT statisticType_Pk PRIMARY KEY (statisticTypeId),
    CONSTRAINT keyCode_Unq UNIQUE (keyCode)
);

CREATE TABLE IF NOT EXISTS statisticType_instrumentType
(
    statisticTypeId  TEXT NOT NULL,
    instrumentTypeId TEXT NOT NULL,

    CONSTRAINT statisticType_instrumentType_PK PRIMARY KEY (statisticTypeId, instrumentTypeId),
    CONSTRAINT idStatisticType_Fk FOREIGN KEY (statisticTypeId) REFERENCES statisticType (statisticTypeId),
    CONSTRAINT idInstrumentType_Fk FOREIGN KEY (instrumentTypeId) REFERENCES instrumentType (instrumentTypeId)
);

CREATE TABLE IF NOT EXISTS instrument
(
    instrumentId     TEXT    NOT NULL,
    statisticYear    INTEGER NOT NULL,
    statisticMonth   INTEGER NOT NULL,
    consecutive      TEXT    NOT NULL,
    saved            INTEGER NOT NULL,
    data             BLOB    NOT NULL,
    createdAt        INTEGER NOT NULL,
    updatedAt        INTEGER,
    instrumentTypeId TEXT    NOT NULL,
    statisticTypeId  TEXT    NOT NULL,
    municipalityId   TEXT    NOT NULL,

    CONSTRAINT instrument_Pk PRIMARY KEY (instrumentId),
    CONSTRAINT instrument_Unq UNIQUE (statisticYear, statisticMonth, consecutive, instrumentTypeId, statisticTypeId,
                                      municipalityId),
    CONSTRAINT instrumentTypeId_Fk FOREIGN KEY (instrumentTypeId) REFERENCES instrumentType (instrumentTypeId),
    CONSTRAINT statisticTypeId_Fk FOREIGN KEY (statisticTypeId) REFERENCES statisticType (statisticTypeId),
    CONSTRAINT municipalityId_Fk FOREIGN KEY (municipalityId) REFERENCES municipality (municipalityId)
);

CREATE TABLE IF NOT EXISTS role
(
    roleId TEXT NOT NULL,
    name   TEXT NOT NULL,

    CONSTRAINT roleId_Pk PRIMARY KEY (roleId)
);

CREATE TABLE IF NOT EXISTS user
(
    userId    TEXT NOT NULL,
    firstname TEXT NOT NULL,
    lastname  TEXT,
    roleId    TEXT NOT NULL,

    CONSTRAINT user_Pk PRIMARY KEY (userId),
    CONSTRAINT roleId_Fk FOREIGN KEY (roleId) REFERENCES role (roleId)
);

CREATE TABLE IF NOT EXISTS credentials
(
    userId   TEXT NOT NULL,
    email    TEXT NOT NULL,
    username TEXT NOT NULL,
    password TEXT NOT NULL,

    CONSTRAINT password_Unq UNIQUE (email),
    CONSTRAINT username_Unq UNIQUE (username),
    CONSTRAINT userId_FK FOREIGN KEY (userId) REFERENCES user (userId)
);

/* Views */

CREATE VIEW IF NOT EXISTS municipalityDetail AS
SELECT m.municipalityId  AS municipalityId,
       m.keyCode         AS municipalityKeyCode,
       m.name            AS municipalityName,
       m.createdAt       AS municipalityCreatedAt,
       m.updatedAt       AS municipalityUpdatedAt,
       m.federalEntityId AS federalEntityId,
       f.keyCode         AS federalEntityKeyCode,
       f.name            AS federalEntityName,
       f.createdAt       AS federalEntityCreatedAt,
       f.updatedAt       AS federalEntityUpdatedAt
FROM municipality AS m
         INNER JOIN federalEntity AS f ON m.federalEntityId = f.federalEntityId;

CREATE VIEW IF NOT EXISTS instrumentTypeDetail AS
SELECT it.instrumentTypeId   AS instrumentTypeId,
       it.name               AS instrumentTypeName,
       it.createdAt          AS instrumentTypeCreatedAt,
       it.updatedAt          AS instrumentTypeUpdatedAt,
       st_it.statisticTypeId AS statisticTypeId
FROM instrumentType AS it
         INNER JOIN statisticType_instrumentType AS st_it ON it.instrumentTypeId = st_it.instrumentTypeId;

CREATE VIEW IF NOT EXISTS instrumentDetail AS
SELECT i.instrumentId      AS instrumentId,
       i.statisticYear     AS statisticYear,
       i.statisticMonth    AS statisticMonth,
       i.consecutive       AS consecutive,
       i.saved             AS saved,
       i.data              AS data,
       i.createdAt         AS createdAt,
       i.updatedAt         AS updatedAt,
       it.instrumentTypeId AS instrumentTypeId,
       it.name             AS instrumentTypeName,
       st.statisticTypeId  AS statisticTypeId,
       st.keyCode          AS statisticTypeKeyCode,
       st.name             AS statisticTypeName,
       st.createdAt        AS statisticTypeCreatedAt,
       st.updatedAt        AS statisticTypeUpdatedAt,
       m.municipalityId    AS municipalityId,
       m.keyCode           AS municipalityKeyCode,
       m.name              AS municipalityName,
       m.createdAt         AS municipalityCreatedAt,
       m.updatedAt         AS municipalityUpdatedAt,
       f.federalEntityId   AS federalEntityId,
       f.keyCode           AS federalEntityKeyCode,
       f.name              AS federalEntityName,
       f.createdAt         AS federalEntityCreatedAt,
       f.updatedAt         AS federalEntityUpdatedAt
FROM instrument AS i
         INNER JOIN instrumentType AS it ON i.instrumentTypeId = it.instrumentTypeId
         INNER JOIN statisticType AS st ON i.statisticTypeId = st.statisticTypeId
         INNER JOIN municipality AS m ON i.municipalityId = m.municipalityId
         INNER JOIN federalEntity AS f ON m.federalEntityId = f.federalEntityId;

CREATE VIEW IF NOT EXISTS userDetail AS
SELECT u.userId    AS userId,
       u.firstname AS firstname,
       u.lastname  AS lastname,
       c.email     AS email,
       c.username  AS username,
       c.password  AS password,
       u.roleId    AS roleId,
       r.name      AS roleName
FROM user AS u
         INNER JOIN role AS r ON u.roleId = r.roleId
         INNER JOIN credentials c on u.userId = c.userId;
